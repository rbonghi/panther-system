#!/bin/bash
# Copyright (C) 2020, Raffaello Bonghi <raffaello@rnext.it>
# All rights reserved
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright 
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its 
#    contributors may be used to endorse or promote products derived 
#    from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

bold=`tput bold`
red=`tput setaf 1`
green=`tput setaf 2`
reset=`tput sgr0`


CUSTOM_WS_NAME="ros_custom_ws"

# Modules check sudo
# https://serverfault.com/questions/266039/temporarily-increasing-sudos-timeout-for-the-duration-of-an-install-script
sudo_me()
{
    local start=$1
    # write sudo me file
    local sudo_stat="/tmp/panther_sudo_status"
    # No sudo loop
    if $start ; then
        touch $sudo_stat
        # Loop script
        while [ -f $sudo_stat ]; do
            # echo "checking $$ ...$(date)"
            sudo -v
            sleep 5
        done &
    else
        if [ -f $sudo_stat ] ; then
            rm $sudo_stat
        fi
    fi
}


# Update all custom packages
custom_pks()
{

    local NUM_CPU=$(nproc)
    local rtabmap_folder=$HOME/rtabmap
    # Run update function
    local THIS="$(pwd)"

    echo " ${bold}a.${reset} Update ${bold}rtabmap${reset}"
    # https://github.com/introlab/rtabmap/wiki/Installation#update-code    
    # Go to rtabmap folder
    cd $rtabmap_folder/rtabmap
    git pull
    
    # Move to build folder
    cd build
    # cmake with flags
    cmake -DRTABMAP_QT_VERSION=4 -DCMAKE_INSTALL_PREFIX=~/$CUSTOM_WS_NAME/devel ..    
    # Make
    time make -j$(($NUM_CPU - 1))
    # Status update wstool
    if [ $? -ne 0 ] ; then
        # Try to make again
        echo "${red}Please check build status ${reset}"
        sudo_me false
        exit 1
    fi
    # Make install
    sudo make install
    # Return to main path
    cd $THIS
}


update_usage()
{
	if [ "$1" != "" ]; then
		echo "${red}$1${reset}"
	fi
	
    echo "updater. Update workspace, repositories and dependencies"
    echo "Usage:"
    echo "$0 [options]"
    echo "options,"
    echo "   -h|--help        | This help"
    echo "   -f|--file [FILE] | File to read"
}


update()
{
    local custom=false
    local rosinstall_file=""
	# Decode all information from startup
    while [ -n "$1" ]; do
        case "$1" in
            -h|--help) # Load help
                update_usage
                exit 0
                ;;
            -f|--file)
                rosinstall_file=$2
                shift 1
                ;;
            --custom)
                custom=true
                ;;
            *)
                update_usage "[ERROR] Unknown option: $1"
                exit 1
                ;;
        esac
            shift 1
    done

    # Install ROS customization
    if $custom ; then
        # Detect opencv
        if hash opencv_version 2>/dev/null; then
            OPENCV_STATUS="$(opencv_version)"
        else
            OPENCV_STATUS="NOT_INSTALLED"
            OPENCV_VERSION_CUDA="NO"
        fi
        # Get OpenCV major version
        OPENCV_MAJOR=${OPENCV_STATUS%.*}
        OPENCV_MAJOR=${OPENCV_MAJOR%.*}
        # Build rosinstall link
        rosinstall_uri="https://raw.githubusercontent.com/rpanther/panther/master/${ROS_DISTRO}_cv$OPENCV_MAJOR.rosinstall"
        # Change ROS_WS_NAME
        ROS_WS_NAME=$CUSTOM_WS_NAME
    # Check if rosinstall file is not empty
    elif [ ! -z $rosinstall_file ] ; then
        rosinstall_uri=$rosinstall_file
    # Extract rosinstall uri
    elif [ "$PANTHER_TYPE" = "sim" ] ; then
        rosinstall_uri="https://raw.githubusercontent.com/rpanther/panther_simulation/master/simulation.rosinstall"
    elif [ "$PANTHER_TYPE" = "robot" ] ; then
        rosinstall_uri="https://raw.githubusercontent.com/rpanther/panther_robot/master/robot.rosinstall"
    else
        update_usage "[ERROR] Unknown config: $PANTHER_TYPE"
        exit 1
    fi


    # Request sudo password
    sudo -v
    sudo_me true
    
    if $custom ; then
        # Run custom packages update
        custom_pks
    fi

    # Run update function
    local THIS="$(pwd)"
    local path="$HOME/$ROS_WS_NAME"
    
    echo " ${bold}1.${reset} Get .rosinstall from ${bold}${green}$rosinstall_uri${reset}"
    # Merge if there are update of repositories
    wstool merge -t "$path/src" $rosinstall_uri
    echo " ${bold}2.${reset} Update workspace ${bold}${green}$ROS_WS_NAME${reset}"
    # Update workspace
    wstool update -t "$path/src"
    # Status update wstool
    if [ $? -ne 0 ] ; then
        # Try to make again
        echo "${red}Please check workspace status ${reset}"
        sudo_me false
        exit 1
    fi
    # Install all dependencies
    # http://wiki.ros.org/rosdep
    echo " ${bold}3.${reset} Install all ${bold}dependencies${reset}"
    rosdep install --from-paths "$path/src" --ignore-src -r -y
    # Go to catkin path
    cd $path
    # Catkin make all workspace
    echo " ${bold}4.${reset} ${bold}catkin_make${reset}"
    catkin_make
    # Return to main path
    cd $THIS

    # Disable sudo me
    sudo_me false
}


usage()
{
	if [ "$1" != "" ]; then
		echo "${red}$1${reset}"
	fi
	
    local name=$(basename ${0})
    echo "Robot ROS managager. Update workspaces and status. (Works with wstool)"
    echo ""
    echo "Commands:"
    echo "        $name update      Update all ROS workspace"
    echo "        $name info        Info about workspace"
    echo "        $name activate    Set ROS_MASTER_URI and ROS_HOSTNAME to robot"
}


main()
{
    local option=$1
    # Catkin main package
    local ROS_WS_NAME=$PANTHER_WS

    # Check if option is in list
    local options=("update" "info" "activate")
    local error=true
    for item in ${options[@]} ; do
        if [ "$item" == "$option" ]; then
            error=false
            break
        fi
    done
    if $error ; then
        usage $option
        exit 1
    fi
    
	# Check if run in sudo
    if [[ `id -u` -eq 0 ]] ; then 
        echo "${red}Please don't run as root${reset}"
        exit 1
    fi
    
    if [ -z "$ROS_WS_NAME" ] ; then
        echo "${red}Doesn't load Panther ROS variables!${reset}"
        exit 1
    fi
    
    # Load all arguments except the first one
    local arguments=${@:2}
    # Options
    if [ $option = "update" ] ; then
        update $arguments
    elif [ $option = "info" ] ; then
        # Update workspace
        wstool info -t "$HOME/$ROS_WS_NAME/src"
    elif [ $option = "activate" ] ; then
        echo "Please use:"
        echo "source panther_activate"
    fi
}


main $@
exit 0

# EOF

